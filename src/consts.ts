export const BotSelfIntro = `我叫许三多，可以通过对话来实现很多任务。您可以这样问我：
   "陪我聊会天儿吧"
   "甲流和新冠是同一种病毒吗？"
   "写一个推广青岛啤酒的方案"
   "朋友结婚了，该怎么写祝福语"
   "孕妇感到恶心，丈夫能做些什么？"
   "孤独感，是个体的特质还是人类的共性"
   "请以初中三年级能理解的方式解释量子计算"
   "请写一段符合国人审美的城市爱情故事，适合做成视频文案"
我还能学习和不断改进，以更好地为您服务。但，我所提供的信息可能有事实性的错误，请一定要有自己的判断！`;

export const ExampleHistory =
  '[{"role":"user","content":"分别给我一段C++和Rust求最小公倍数的代码","uuid":"660d3734-e3f8-4d4a-8af1-5791e1cd71d9"},{"role":"assistant","content":"以下是C++实现最小公倍数的代码：\\n\\n```c++\\n#include <iostream>\\nusing namespace std;\\n\\nint gcd(int num1, int num2) { // 求最大公约数\\n    return num2 == 0 ? num1 : gcd(num2, num1%num2);\\n}\\n\\nint lcm(int num1, int num2) { // 求最小公倍数\\n    return num1 / gcd(num1, num2) * num2;\\n}\\n\\nint main() {\\n    int num1 = 12;\\n    int num2 = 18;\\n    cout << \\"最小公倍数为：\\" << lcm(num1, num2) << endl; // 输出最小公倍数\\n    return 0;\\n}\\n```\\n\\n以下是Rust实现最小公倍数的代码：\\n\\n```rust\\nfn gcd(mut num1: i32, mut num2: i32) -> i32 { // 求最大公约数\\n    while num2 != 0 {\\n        let tmp = num1 % num2;\\n        num1 = num2;\\n        num2 = tmp;\\n    }\\n    num1\\n}\\n\\nfn lcm(num1: i32, num2: i32) -> i32 { // 求最小公倍数\\n    num1 / gcd(num1, num2) * num2\\n}\\n\\nfn main() {\\n    let num1 = 12;\\n    let num2 = 18;\\n    println!(\\"最小公倍数为：{}\\", lcm(num1, num2)); // 输出最小公倍数\\n}\\n```","uuid":"7d521643-ffbb-49c5-b8b4-c8714115c249"},{"role":"user","content":"fix this ts code\\n\\n```\\nimport React from \\"react\\";\\n\\nfunction TextWithCode({ text: string }) {\\n  console.log(text.split(/```(\\\\S+)?\\\\n(.+)\\\\n```(\\\\n|$)/));\\n  return \\n\\n{text}\\n;\\n}\\n```","uuid":"fc3b47b3-0325-49e3-b68d-a0398e127fc3"},{"role":"assistant","content":"Here\'s the updated TypeScript code with the error fixed:\\n\\n```\\nimport React from \\"react\\";\\n\\ninterface TextWithCodeProps {\\n  text: string;\\n}\\n\\nfunction TextWithCode({ text }: TextWithCodeProps) {\\n  console.log(text.split(/```(\\\\S+)?\\\\n(.+)\\\\n```(\\\\n|$)/));\\n  return <>{text}</>;\\n}\\n```\\n\\nThe issue with the original code is that the parameter `text` is not correctly defined as a string type in the function arguments. The updated code defines the text property as part of an interface and passes this interface as the function argument.","uuid":"e251d389-461e-4515-9a17-c2026f4517bb"},{"role":"user","content":"write ts code, loop each line of `text`, find code blocks(wrapped in \\"```\\"), put those  code into   <CopyBlock\\n    text={code}\\n    language={language}\\n> and put other lines into <p>.","uuid":"4ed9091e-371c-40c8-ad09-9036c8453f2b"},{"role":"assistant","content":"Here is the TypeScript code that loops through each line of the given `text` and separates code blocks (wrapped in \\"```\\") and other lines into different components:\\n\\n```\\nimport React from \\"react\\";\\nimport { CopyBlock, monoBlue } from \\"react-code-blocks\\";\\n\\ninterface TextWithCodeProps {\\n  text: string;\\n}\\n\\nfunction TextWithCode({ text }: TextWithCodeProps) {\\n  const lines = text.split(\\"\\\\n\\");\\n  const result = [];\\n  let language = \\"\\";\\n\\n  for (let i = 0; i < lines.length; i++) {\\n    const line = lines[i].trim();\\n\\n    if (line.startsWith(\\"```\\")) {\\n      if (language === \\"\\") {\\n        language = line.slice(3);\\n      } else {\\n        const code = lines\\n          .slice(i + 1)\\n          .takeWhile((line) => !line.startsWith(\\"```\\"))\\n          .join(\\"\\\\n\\");\\n        result.push(\\n          <CopyBlock text={code} language={language} theme={monoBlue} />,\\n          <br />\\n        );\\n        i += code.split(\\"\\\\n\\").length + 1;\\n        language = \\"\\";\\n      }\\n    } else {\\n      if (language === \\"\\") {\\n        result.push(<p>{line}</p>);\\n      }\\n    }\\n  }\\n\\n  return <>{result}</>;\\n}\\n```\\n\\nThis code uses the `split()` method to split the `text` into individual lines and then loops through each line. It checks if the line starts with \\"```\\" and separates code blocks, while adding any other lines to a paragraph. \\n\\nIf a line is found to start with \\"```\\", the code checks if it\'s the start or end of a code block. If it\'s the start, the language of the code block is saved. If it\'s the end, the code block is extracted and wrapped in a `CopyBlock` component from the `react-code-blocks` library. It also increments the loop index to skip over the lines of the extracted code block.\\n\\nFinally, the resulting array of components is returned inside of a React fragment.","uuid":"4d89dd52-f988-416f-9d05-224cacf279ae"},{"role":"user","content":"正确使用ts的高亮返回这段代码","uuid":"6babf453-31a0-4776-aa80-8a9658621e8d"},{"role":"assistant","content":"你可以使用 `highlight.js` 库来使用 TypeScript 的高亮。下面是一个示例 React 组件，它接收一个 `code` 和一个 `language` 属性，并使用 `highlight.js` 将代码高亮:\\n\\n```\\nimport React, { useEffect, useRef } from \'react\';\\nimport hljs from \'highlight.js\';\\nimport \'highlight.js/scss/vs2015.scss\';\\n\\ninterface CodeBlockProps {\\n  code: string;\\n  language?: string;\\n}\\n\\nconst CodeBlock: React.FC<CodeBlockProps> = ({ code, language }) => {\\n  const codeElement = useRef<HTMLElement>(null);\\n\\n  useEffect(() => {\\n    if (codeElement.current) {\\n      hljs.highlightBlock(codeElement.current);\\n    }\\n  }, [code, language]);\\n\\n  return (\\n    <pre>\\n      <code ref={codeElement} className={language}>\\n        {code}\\n      </code>\\n    </pre>\\n  );\\n};\\n\\nexport default CodeBlock;\\n```\\n\\n你可以通过 `CodeBlock` 组件渲染你的代码，如下所示:\\n\\n```\\nconst code = `interface Person {\\n  name: string;\\n  age: number;\\n}\\n\\nfunction sayHello(person: Person) {\\n  console.log(\'Hello, \' + person.name);\\n}`;\\n\\n<CodeBlock code={code} language=\\"typescript\\" />\\n```\\n\\n这将渲染具有 TypeScript 高亮的代码块。请注意，你可以在 `language` 属性中指定其他语言。","uuid":"44d3b386-5b65-4197-a4e6-2cd482483c82"},{"role":"user","content":"你给我的是文本，不是ts代码块","uuid":"467a4d6a-722b-4f19-b7be-31b04605193a"},{"role":"assistant","content":"非常抱歉，是我理解错了。以下是格式正确的 TypeScript 代码块，你可以将其包裹在 Markdown 的代码块符号 (\\\\`\\\\`\\\\`) 中，以便高亮显示：\\n\\n```typescript\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\n\\nfunction sayHello(person: Person) {\\n  console.log(\'Hello, \' + person.name);\\n}\\n```\\n\\n在这个示例中，我们定义了一个接口 `Person`，包含两个属性： `name` 和 `age`。然后我们定义了一个函数 `sayHello`，它接收一个 `Person` 类型的参数，并打印一条欢迎消息到控制台。\\n\\n请注意，您可以使用任何 JavaScript 可用的功能（除非在 TS 中明确禁用了）来编写 TypeScript 代码。 TypeScript 是一种在 JavaScript 基础上构建的语言，它添加了静态类型检查、类、接口等更多的功能。","uuid":"a7c994e2-8a96-4c60-89c9-0c746041b0ac"},{"role":"user","content":"精简这个段落：\\n\\n当我将这个项目分享，我的高中老师告诉我市场上的类似应用通常在几次对话后会要求用户支付15元的费用，但我能够开发出一个完全免费的工具供大家使用，这是难以置信的成就。我马上告诉他其实我只调用了一个API接口。\\n我震惊地发现，进步的科技传递给更多人同时，伴随着怎样的混乱与暴利。","uuid":"421ffb26-0610-41c2-b6aa-46704fb739df"},{"role":"assistant","content":"我惊讶地发现分享这个项目后，我的高中老师告诉我，市场上的类似应用通常在几次对话后会要求用户支付15元的费用。然而，我能够开发出一个完全免费的工具供大家使用，这很不可思议。我向他解释道，其实我只调用了一个API接口。这让我反思，现代科技的进步可以让更多人受益，但也带来了社会混乱和暴利。","uuid":"7212a0cf-20ef-4355-a726-c5ce5a7338d2"},{"role":"user","content":"请以初中三年级能理解的方式解释量子计算","uuid":"94a2b538-183d-419c-940a-e7ac264f4dc0"},{"role":"assistant","content":"你知道我们在电脑上做的所有事情都是由许多二进制位组成的，比如0和1。二进制位是一种仅包含0和1两种状态的电信号，是电脑中信息处理过程的基础。每个运算和操作都是基于这些二进制位来进行的。\\n\\n而在量子计算中，它处理的信息不是由0和1组成的二进制位，而是由“量子位”组成的。这叫做“qubit”。qubit 可以不只是0或1，它可以同时代表两个数字。这个概念有点儿像当你既选A也选B的时候，你既是A也是B，而不是只能选择其中一个。\\n\\n量子计算机可以同时计算所有可能的答案，而经典计算机要一个一个尝试才能得到正确答案。这就让量子计算机比经典计算机在某些特定条件下快很多。\\n\\n总之，量子计算机的出现可能会对我们生活的方方面面产生很大的变化，例如在安全通信、化学合成、粒子物理等领域可能会带来更多的突破和发现。","uuid":"f0a5a71d-a2b9-4c4a-9c32-d8a4f0e8496f"}]';
